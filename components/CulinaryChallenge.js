import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Image from 'next/image'
import { useAuth } from './AuthContext'
import { logInfo, logUserInteraction } from '../utils/logger'
import styles from '../styles/CulinaryChallenge.module.css'

// Donn√©es des d√©fis culinaires
const CULINARY_CHALLENGES = [
  {
    id: 'knife-skills',
    title: 'Ma√Ætrise du Couteau üî™',
    category: 'Technique',
    difficulty: 'D√©butant',
    description: 'Apprenez les techniques de d√©coupe essentielles',
    icon: 'üî™',
    color: '#3b82f6',
    gradient: 'linear-gradient(135deg, #3b82f6, #1e40af)',
    type: 'tip', // tip ou recipe
    content: {
      tip: "Pour une d√©coupe parfaite, tenez votre couteau en pince et guidez avec vos jointures. Gardez la lame toujours en contact avec la planche.",
      techniques: [
        "Julienne: b√¢tonnets fins 2-3mm",
        "Brunoise: petits d√©s r√©guliers",
        "Chiffonnade: lani√®res de feuilles"
      ]
    },
    xp: 50,
    badge: 'üèÖ Apprenti Chef'
  },
  {
    id: 'pasta-perfecta',
    title: 'P√¢tes Parfaites üçù',
    category: 'Recette',
    difficulty: 'Interm√©diaire',
    description: 'La recette ultime des p√¢tes √† l\'italienne',
    icon: 'üçù',
    color: '#10b981',
    gradient: 'linear-gradient(135deg, #10b981, #059669)',
    type: 'recipe',
    content: {
      recipe: {
        title: "Spaghetti Carbonara Authentique",
        servings: 4,
        prepTime: "15 min",
        ingredients: [
          "400g spaghetti",
          "200g guanciale ou pancetta",
          "4 ≈ìufs entiers + 2 jaunes",
          "100g Pecorino Romano r√¢p√©",
          "Poivre noir fra√Æchement moulu"
        ],
        instructions: [
          "Faire cuire les p√¢tes dans l'eau sal√©e al dente",
          "Faire revenir le guanciale jusqu'√† ce qu'il soit croustillant",
          "M√©langer ≈ìufs et fromage dans un bol",
          "√âgoutter les p√¢tes en gardant un verre d'eau de cuisson",
          "M√©langer rapidement hors du feu pour cr√©er la cr√®me"
        ]
      }
    },
    xp: 100,
    badge: 'üë®‚Äçüç≥ Ma√Ætre Pasteur'
  },
  {
    id: 'sauce-mastery',
    title: 'Ma√Ætrise des Sauces ü•Ñ',
    category: 'Technique',
    difficulty: 'Avanc√©',
    description: 'Les 5 sauces m√®res de la cuisine fran√ßaise',
    icon: 'ü•Ñ',
    color: '#f59e0b',
    gradient: 'linear-gradient(135deg, #f59e0b, #d97706)',
    type: 'tip',
    content: {
      tip: "Ma√Ætrisez les 5 sauces m√®res : B√©chamel, Velout√©, Espagnole, Hollandaise et Tomate. Elles sont la base de centaines de sauces d√©riv√©es.",
      sauces: [
        "B√©chamel: roux blanc + lait",
        "Velout√©: roux blanc + bouillon",
        "Espagnole: roux brun + bouillon brun",
        "Hollandaise: jaunes d'≈ìufs + beurre + citron",
        "Tomate: tomates + aromates"
      ]
    },
    xp: 150,
    badge: 'üéñÔ∏è Saucier Expert'
  },
  {
    id: 'bread-magic',
    title: 'Magie du Pain üçû',
    category: 'Recette',
    difficulty: 'Expert',
    description: 'Pain artisanal fait maison',
    icon: 'üçû',
    color: '#dc2626',
    gradient: 'linear-gradient(135deg, #dc2626, #991b1b)',
    type: 'recipe',
    content: {
      recipe: {
        title: "Pain de Campagne Artisanal",
        servings: 1,
        prepTime: "4h + 12h lev√©e",
        ingredients: [
          "500g farine T65",
          "350ml eau ti√®de",
          "10g sel",
          "5g levure fra√Æche",
          "Levain naturel (optionnel)"
        ],
        instructions: [
          "Autolyse: m√©langer farine et eau, reposer 30min",
          "Ajouter sel et levure, p√©trir 10min",
          "Premi√®re fermentation: 2h √† temp√©rature ambiante",
          "Fa√ßonnage et seconde fermentation: 12h au frais",
          "Cuisson: 250¬∞C puis 220¬∞C pendant 45min"
        ]
      }
    },
    xp: 200,
    badge: 'üèÜ Ma√Ætre Boulanger'
  }
]

export default function CulinaryChallenge() {
  const { user } = useAuth()
  const router = useRouter()
  const [challenges, setChallenges] = useState(CULINARY_CHALLENGES)
  const [selectedChallenge, setSelectedChallenge] = useState(null)
  const [completedChallenges, setCompletedChallenges] = useState(new Set())
  const [userXP, setUserXP] = useState(0)
  const [activeCategory, setActiveCategory] = useState('all')

  // Charger les d√©fis compl√©t√©s depuis localStorage - VERSION S√âCURIS√âE
  useEffect(() => {
    if (user && typeof window !== 'undefined' && typeof localStorage !== 'undefined') {
      try {
        const saved = localStorage.getItem(`culinary_challenges_${user.id}`)
        if (saved) {
          const data = JSON.parse(saved)
          setCompletedChallenges(new Set(data.completed || []))
          setUserXP(data.xp || 0)
        }
      } catch (error) {
        console.error('Erreur chargement d√©fis:', error)
      }
    }
  }, [user])

  const categories = ['all', 'Technique', 'Recette']

  const filteredChallenges = challenges.filter(challenge => 
    activeCategory === 'all' || challenge.category === activeCategory
  )

  const completeChallenge = (challengeId) => {
    if (!user) {
      alert('Connectez-vous pour valider ce d√©fi !')
      return
    }

    const challenge = challenges.find(c => c.id === challengeId)
    if (!challenge || completedChallenges.has(challengeId)) return

    const newCompleted = new Set([...completedChallenges, challengeId])
    const newXP = userXP + challenge.xp

    setCompletedChallenges(newCompleted)
    setUserXP(newXP)

    // Sauvegarder
    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {
      try {
        localStorage.setItem(`culinary_challenges_${user.id}`, JSON.stringify({
          completed: [...newCompleted],
          xp: newXP
        }))
      } catch (error) {
        console.error('Erreur sauvegarde:', error)
      }
    }

    // Animation de succ√®s
    showSuccessAnimation(challenge)

    logUserInteraction('COMPLETE_CHALLENGE', 'culinary-challenge', {
      challengeId,
      xpGained: challenge.xp,
      totalXP: newXP
    })
  }

  const showSuccessAnimation = (challenge) => {
    const notification = document.createElement('div')
    notification.innerHTML = `
      <div style="display: flex; align-items: center; gap: 12px;">
        <span style="font-size: 2rem;">${challenge.icon}</span>
        <div>
          <div style="font-weight: 700; font-size: 1.1rem;">D√©fi Compl√©t√© !</div>
          <div style="color: #10b981; font-weight: 600;">+${challenge.xp} XP ‚Ä¢ ${challenge.badge}</div>
        </div>
      </div>
    `
    notification.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(135deg, #ffffff, #f8fafc);
      border: 2px solid #10b981;
      border-radius: 16px;
      padding: 20px;
      z-index: 10000;
      box-shadow: 0 20px 40px rgba(16, 185, 129, 0.3);
      animation: challengeSuccess 0.6s ease-out;
    `
    document.body.appendChild(notification)
    setTimeout(() => notification.remove(), 3000)
  }

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'D√©butant': return '#10b981'
      case 'Interm√©diaire': return '#f59e0b'
      case 'Avanc√©': return '#f97316'
      case 'Expert': return '#dc2626'
      default: return '#6b7280'
    }
  }

  return (
    <div className={styles.challengeContainer}>
      {/* Header avec stats utilisateur */}
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h1>üèÜ D√©fis Culinaires</h1>
          <p>Relevez des d√©fis, apprenez de nouvelles techniques et d√©bloquez des badges !</p>
        </div>
        
        {user && (
          <div className={styles.userStats}>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{userXP}</div>
              <div className={styles.statLabel}>XP Total</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>{completedChallenges.size}</div>
              <div className={styles.statLabel}>D√©fis R√©alis√©s</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statValue}>
                {Math.floor(completedChallenges.size / challenges.length * 100)}%
              </div>
              <div className={styles.statLabel}>Progression</div>
            </div>
          </div>
        )}
      </div>

      {/* Filtres par cat√©gorie */}
      <div className={styles.filters}>
        {categories.map(category => (
          <button
            key={category}
            onClick={() => setActiveCategory(category)}
            className={`${styles.filterBtn} ${activeCategory === category ? styles.active : ''}`}
          >
            {category === 'all' ? 'üåü Tous' : 
             category === 'Technique' ? 'üîß Techniques' : 
             'üìñ Recettes'}
          </button>
        ))}
      </div>

      {/* Grille des d√©fis */}
      <div className={styles.challengesGrid}>
        {filteredChallenges.map(challenge => {
          const isCompleted = completedChallenges.has(challenge.id)
          
          return (
            <div
              key={challenge.id}
              className={`${styles.challengeCard} ${isCompleted ? styles.completed : ''}`}
              style={{ '--card-gradient': challenge.gradient }}
              onClick={() => setSelectedChallenge(challenge)}
            >
              {/* Badge de r√©ussite */}
              {isCompleted && (
                <div className={styles.completedBadge}>
                  ‚úÖ Compl√©t√©
                </div>
              )}

              {/* Header de carte */}
              <div className={styles.cardHeader}>
                <div className={styles.challengeIcon} style={{ background: challenge.gradient }}>
                  {challenge.icon}
                </div>
                <div className={styles.challengeType}>
                  {challenge.type === 'tip' ? 'üí° Astuce' : 'üìñ Recette'}
                </div>
              </div>

              {/* Contenu principal */}
              <div className={styles.cardContent}>
                <h3 className={styles.challengeTitle}>{challenge.title}</h3>
                <p className={styles.challengeDescription}>{challenge.description}</p>

                {/* M√©tadonn√©es */}
                <div className={styles.challengeMeta}>
                  <span 
                    className={styles.difficulty}
                    style={{ backgroundColor: getDifficultyColor(challenge.difficulty) }}
                  >
                    {challenge.difficulty}
                  </span>
                  <span className={styles.category}>{challenge.category}</span>
                </div>

                {/* R√©compense */}
                <div className={styles.reward}>
                  <span className={styles.xp}>+{challenge.xp} XP</span>
                  <span className={styles.badge}>{challenge.badge}</span>
                </div>
              </div>

              {/* Action button */}
              <div className={styles.cardActions}>
                {isCompleted ? (
                  <button className={styles.viewBtn}>
                    üëÅÔ∏è Revoir
                  </button>
                ) : (
                  <button className={styles.startBtn}>
                    üöÄ Commencer
                  </button>
                )}
              </div>
            </div>
          )
        })}
      </div>

      {/* Modal de d√©tail */}
      {selectedChallenge && (
        <div className={styles.modal} onClick={() => setSelectedChallenge(null)}>
          <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
            <div className={styles.modalHeader}>
              <div className={styles.modalIcon} style={{ background: selectedChallenge.gradient }}>
                {selectedChallenge.icon}
              </div>
              <div>
                <h2>{selectedChallenge.title}</h2>
                <div className={styles.modalMeta}>
                  <span style={{ color: getDifficultyColor(selectedChallenge.difficulty) }}>
                    {selectedChallenge.difficulty}
                  </span>
                  <span>‚Ä¢</span>
                  <span>{selectedChallenge.category}</span>
                  <span>‚Ä¢</span>
                  <span>+{selectedChallenge.xp} XP</span>
                </div>
              </div>
              <button onClick={() => setSelectedChallenge(null)} className={styles.closeBtn}>
                ‚úï
              </button>
            </div>

            <div className={styles.modalBody}>
              {selectedChallenge.type === 'tip' ? (
                <div className={styles.tipContent}>
                  <h3>üí° Astuce Culinaire</h3>
                  <p className={styles.tipText}>{selectedChallenge.content.tip}</p>
                  
                  {selectedChallenge.content.techniques && (
                    <div className={styles.techniquesList}>
                      <h4>Techniques √† ma√Ætriser :</h4>
                      <ul>
                        {selectedChallenge.content.techniques.map((technique, index) => (
                          <li key={index}>{technique}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {selectedChallenge.content.sauces && (
                    <div className={styles.saucesList}>
                      <h4>Les 5 sauces m√®res :</h4>
                      <ul>
                        {selectedChallenge.content.sauces.map((sauce, index) => (
                          <li key={index}>{sauce}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ) : (
                <div className={styles.recipeContent}>
                  <h3>üìñ Recette Compl√®te</h3>
                  <div className={styles.recipeHeader}>
                    <h4>{selectedChallenge.content.recipe.title}</h4>
                    <div className={styles.recipeInfo}>
                      <span>üë• {selectedChallenge.content.recipe.servings} portions</span>
                      <span>‚è±Ô∏è {selectedChallenge.content.recipe.prepTime}</span>
                    </div>
                  </div>

                  <div className={styles.ingredients}>
                    <h5>Ingr√©dients :</h5>
                    <ul>
                      {selectedChallenge.content.recipe.ingredients.map((ingredient, index) => (
                        <li key={index}>{ingredient}</li>
                      ))}
                    </ul>
                  </div>

                  <div className={styles.instructions}>
                    <h5>Instructions :</h5>
                    <ol>
                      {selectedChallenge.content.recipe.instructions.map((instruction, index) => (
                        <li key={index}>{instruction}</li>
                      ))}
                    </ol>
                  </div>
                </div>
              )}
            </div>

            <div className={styles.modalActions}>
              {!completedChallenges.has(selectedChallenge.id) ? (
                <button
                  onClick={() => completeChallenge(selectedChallenge.id)}
                  className={styles.completeBtn}
                  disabled={!user}
                >
                  {user ? `‚úÖ Marquer comme compl√©t√© (+${selectedChallenge.xp} XP)` : 'üîê Connectez-vous pour valider'}
                </button>
              ) : (
                <div className={styles.completedInfo}>
                  <span>üéâ D√©fi compl√©t√© ! Badge obtenu : {selectedChallenge.badge}</span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes challengeSuccess {
          0% {
            transform: translate(-50%, -50%) scale(0.8);
            opacity: 0;
          }
          50% {
            transform: translate(-50%, -50%) scale(1.1);
          }
          100% {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  )
}

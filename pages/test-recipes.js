import { useState, useEffect, useRef } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { supabase } from '../lib/supabase'
import { logInfo, logError, logWarning, logDebug } from '../utils/logger'
import { createRecipesTableIfNotExists, initializeRecipesTable } from '../lib/supabase'

export default function TestRecipes() {
  const router = useRouter()
  const [logs, setLogs] = useState([])
  const [recipes, setRecipes] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [testResults, setTestResults] = useState({})
  const logsEndRef = useRef(null)

  // Intercepter les logs de la console pour les afficher
  useEffect(() => {
    const originalConsoleLog = console.log
    const originalConsoleError = console.error
    const originalConsoleWarn = console.warn

    const addLog = (type, message, data = null) => {
      const timestamp = new Date().toISOString()
      setLogs(prev => [...prev, {
        id: Date.now() + Math.random(),
        timestamp,
        type,
        message: typeof message === 'string' ? message : JSON.stringify(message),
        data: data ? JSON.stringify(data, null, 2) : null
      }])
    }

    console.log = (...args) => {
      originalConsoleLog(...args)
      addLog('LOG', args.join(' '))
    }

    console.error = (...args) => {
      originalConsoleError(...args)
      addLog('ERROR', args.join(' '))
    }

    console.warn = (...args) => {
      originalConsoleWarn(...args)
      addLog('WARN', args.join(' '))
    }

    return () => {
      console.log = originalConsoleLog
      console.error = originalConsoleError
      console.warn = originalConsoleWarn
    }
  }, [])

  // Auto-scroll vers le bas des logs
  useEffect(() => {
    logsEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [logs])

  const clearLogs = () => {
    setLogs([])
    logInfo('Logs effac√©s depuis la page de test')
  }

  const testSupabaseConnection = async () => {
    setIsLoading(true)
    logInfo('üîç Test de connexion Supabase...')
    
    try {
      const { data, error } = await supabase
        .from('recipes')
        .select('count')
        .limit(1)

      if (error) {
        logError('‚ùå Connexion Supabase √©chou√©e', error)
        setTestResults(prev => ({ ...prev, supabase: 'ERREUR' }))
      } else {
        logInfo('‚úÖ Connexion Supabase r√©ussie')
        setTestResults(prev => ({ ...prev, supabase: 'OK' }))
      }
    } catch (error) {
      logError('‚ùå Erreur critique Supabase', error)
      setTestResults(prev => ({ ...prev, supabase: 'CRITIQUE' }))
    } finally {
      setIsLoading(false)
    }
  }

  const loadRecipes = async () => {
    setIsLoading(true)
    logInfo('üìñ Chargement des recettes...')
    
    try {
      const { data, error } = await supabase
        .from('recipes')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) {
        logError('‚ùå Erreur lors du chargement des recettes', error)
        setTestResults(prev => ({ ...prev, loadRecipes: 'ERREUR' }))
      } else {
        logInfo(`‚úÖ ${data.length} recettes charg√©es`, {
          recipesCount: data.length,
          firstRecipe: data[0]?.title,
          lastRecipe: data[data.length - 1]?.title
        })
        setRecipes(data)
        setTestResults(prev => ({ ...prev, loadRecipes: 'OK' }))
      }
    } catch (error) {
      logError('‚ùå Erreur critique lors du chargement', error)
      setTestResults(prev => ({ ...prev, loadRecipes: 'CRITIQUE' }))
    } finally {
      setIsLoading(false)
    }
  }

  const createTestRecipe = async () => {
    setIsLoading(true)
    logInfo('üß™ Cr√©ation d\'une recette de test...')
    
    const testRecipe = {
      title: `Test Recipe ${Date.now()}`,
      description: 'Recette cr√©√©e automatiquement pour les tests',
      ingredients: ['Ingr√©dient test 1', 'Ingr√©dient test 2', 'Ingr√©dient test 3'],
      instructions: [
        { step: 1, instruction: '√âtape de test 1' },
        { step: 2, instruction: '√âtape de test 2' },
        { step: 3, instruction: '√âtape de test 3' }
      ],
      prepTime: '10 min',
      cookTime: '15 min',
      category: 'Test',
      author: 'Testeur Automatique',
      image: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-4.0.3'
    }

    try {
      logDebug('Donn√©es de la recette de test', JSON.stringify(testRecipe, null, 2))
      
      const { data, error } = await supabase
        .from('recipes')
        .insert([testRecipe])
        .select()
        .single()

      if (error) {
        logError('‚ùå Erreur lors de la cr√©ation de la recette de test', JSON.stringify({
          error: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        }, null, 2))
        setTestResults(prev => ({ ...prev, createRecipe: 'ERREUR' }))
      } else {
        logInfo('‚úÖ Recette de test cr√©√©e avec succ√®s', JSON.stringify({
          id: data.id,
          title: data.title,
          created_at: data.created_at
        }, null, 2))
        setTestResults(prev => ({ ...prev, createRecipe: 'OK' }))
        // Recharger les recettes
        await loadRecipes()
      }
    } catch (error) {
      logError('‚ùå Erreur critique lors de la cr√©ation', JSON.stringify({
        message: error.message,
        stack: error.stack,
        name: error.name
      }, null, 2))
      setTestResults(prev => ({ ...prev, createRecipe: 'CRITIQUE' }))
    } finally {
      setIsLoading(false)
    }
  }

  const deleteTestRecipes = async () => {
    setIsLoading(true)
    logInfo('üóëÔ∏è Suppression des recettes de test...')
    
    try {
      const { data, error } = await supabase
        .from('recipes')
        .delete()
        .like('title', 'Test Recipe%')
        .select()

      if (error) {
        logError('‚ùå Erreur lors de la suppression', error)
        setTestResults(prev => ({ ...prev, deleteTest: 'ERREUR' }))
      } else {
        logInfo(`‚úÖ ${data.length} recettes de test supprim√©es`)
        setTestResults(prev => ({ ...prev, deleteTest: 'OK' }))
        await loadRecipes()
      }
    } catch (error) {
      logError('‚ùå Erreur critique lors de la suppression', error)
      setTestResults(prev => ({ ...prev, deleteTest: 'CRITIQUE' }))
    } finally {
      setIsLoading(false)
    }
  }

  const testTableCreation = async () => {
    setIsLoading(true)
    logInfo('üèóÔ∏è Test de cr√©ation/v√©rification de la table...')
    
    try {
      const success = await createRecipesTableIfNotExists()
      
      if (success) {
        logInfo('‚úÖ Table recipes cr√©√©e/v√©rifi√©e avec succ√®s')
        setTestResults(prev => ({ ...prev, tableCreation: 'OK' }))
      } else {
        logWarning('‚ö†Ô∏è Probl√®me lors de la cr√©ation de la table')
        setTestResults(prev => ({ ...prev, tableCreation: 'ATTENTION' }))
      }
    } catch (error) {
      logError('‚ùå Erreur lors de la cr√©ation de la table', error)
      setTestResults(prev => ({ ...prev, tableCreation: 'ERREUR' }))
    } finally {
      setIsLoading(false)
    }
  }

  const initializeDatabase = async () => {
    setIsLoading(true)
    logInfo('üöÄ Initialisation compl√®te de la base de donn√©es...')
    
    try {
      await initializeRecipesTable()
      logInfo('‚úÖ Base de donn√©es initialis√©e')
      setTestResults(prev => ({ ...prev, dbInit: 'OK' }))
      await loadRecipes()
    } catch (error) {
      logError('‚ùå Erreur lors de l\'initialisation', error)
      setTestResults(prev => ({ ...prev, dbInit: 'ERREUR' }))
    } finally {
      setIsLoading(false)
    }
  }

  const runAllTests = async () => {
    logInfo('üöÄ D√©but des tests automatiques...')
    await testTableCreation()
    await testSupabaseConnection()
    await loadRecipes()
    await createTestRecipe()
    logInfo('‚úÖ Tests automatiques termin√©s')
  }

  const displaySQLInstructions = () => {
    logInfo('üìã Affichage des instructions SQL pour la cr√©ation de table')
    
    const sqlInstructions = `
=== SQL POUR CR√âER LA TABLE RECIPES ===

1. Allez dans votre dashboard Supabase
2. Cliquez sur "SQL Editor" 
3. Ex√©cutez ce code SQL :

CREATE TABLE recipes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  ingredients TEXT NOT NULL,
  instructions TEXT NOT NULL,
  "prepTime" TEXT,
  "cookTime" TEXT,
  servings TEXT,
  category TEXT,
  difficulty TEXT DEFAULT 'Facile',
  author TEXT DEFAULT 'Anonyme',
  image TEXT,
  photos JSONB DEFAULT '[]'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_recipes_created_at ON recipes(created_at DESC);
CREATE INDEX idx_recipes_category ON recipes(category);

ALTER TABLE recipes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON recipes FOR SELECT USING (true);
CREATE POLICY "Enable insert for all users" ON recipes FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for all users" ON recipes FOR UPDATE USING (true);
CREATE POLICY "Enable delete for all users" ON recipes FOR DELETE USING (true);

=== FIN DU SQL ===
    `
    
    console.log(sqlInstructions)
    alert('Instructions SQL affich√©es dans la console. Consultez les logs pour voir le code complet.')
  }

  return (
    <>
      <Head>
        <title>Test des Recettes - COCO</title>
        <meta name="description" content="Page de test pour le syst√®me de recettes" />
      </Head>
      
      <div style={{ display: 'flex', height: '100vh', fontFamily: 'monospace' }}>
        {/* Panel de contr√¥le */}
        <div style={{ width: '300px', padding: '20px', background: '#f5f5f5', borderRight: '1px solid #ddd' }}>
          <h2>üß™ Tests Recettes</h2>
          
          <button onClick={() => router.back()} style={{ marginBottom: '20px', padding: '8px 16px' }}>
            ‚Üê Retour
          </button>

          <div style={{ marginBottom: '20px' }}>
            <h3>Actions</h3>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
              <button onClick={runAllTests} disabled={isLoading}>
                üöÄ Tests Auto
              </button>
              <button onClick={testSupabaseConnection} disabled={isLoading}>
                üîç Test Connexion
              </button>
              <button onClick={testTableCreation} disabled={isLoading}>
                üèóÔ∏è Test Table
              </button>
              <button onClick={displaySQLInstructions}>
                üìã SQL Instructions
              </button>
              <button onClick={loadRecipes} disabled={isLoading}>
                üìñ Charger Recettes
              </button>
              <button onClick={createTestRecipe} disabled={isLoading}>
                ‚ûï Cr√©er Test
              </button>
              <button onClick={deleteTestRecipes} disabled={isLoading}>
                üóëÔ∏è Supprimer Tests
              </button>
              <button onClick={() => router.push('/submit-recipe')}>
                üìù Formulaire
              </button>
            </div>
          </div>

          <div style={{ marginBottom: '20px' }}>
            <h3>R√©sultats</h3>
            {Object.entries(testResults).map(([test, result]) => (
              <div key={test} style={{ 
                padding: '5px', 
                background: result === 'OK' ? '#d4edda' : result === 'ERREUR' ? '#f8d7da' : '#fff3cd',
                margin: '2px 0',
                borderRadius: '3px'
              }}>
                {test}: {result}
              </div>
            ))}
          </div>

          <div>
            <h3>Recettes ({recipes.length})</h3>
            <div style={{ maxHeight: '200px', overflow: 'auto', fontSize: '12px' }}>
              {recipes.map(recipe => (
                <div key={recipe.id} style={{ padding: '5px', borderBottom: '1px solid #eee' }}>
                  <strong>{recipe.title}</strong><br/>
                  <small>{recipe.author} - {recipe.category}</small>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Panel des logs */}
        <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
          <div style={{ padding: '10px', borderBottom: '1px solid #ddd', background: '#fff' }}>
            <h2>üìã Logs en temps r√©el</h2>
            <button onClick={clearLogs} style={{ padding: '5px 10px' }}>
              üóëÔ∏è Effacer logs
            </button>
            <span style={{ marginLeft: '20px', color: '#666' }}>
              {logs.length} entr√©es
            </span>
          </div>
          
          <div style={{ 
            flex: 1, 
            overflow: 'auto', 
            padding: '10px', 
            background: '#1e1e1e', 
            color: '#fff',
            fontSize: '12px',
            lineHeight: '1.4'
          }}>
            {logs.map(log => (
              <div key={log.id} style={{ 
                marginBottom: '10px', 
                padding: '8px',
                borderLeft: `4px solid ${
                  log.type === 'ERROR' ? '#ff4757' : 
                  log.type === 'WARN' ? '#ffa502' : 
                  '#2ed573'
                }`,
                background: 'rgba(255,255,255,0.05)'
              }}>
                <div style={{ color: '#888', fontSize: '10px' }}>
                  {log.timestamp} - {log.type}
                </div>
                <div style={{ marginTop: '4px' }}>{log.message}</div>
                {log.data && (
                  <pre style={{ 
                    marginTop: '8px', 
                    fontSize: '10px', 
                    background: 'rgba(0,0,0,0.3)',
                    padding: '8px',
                    borderRadius: '3px',
                    overflow: 'auto'
                  }}>
                    {log.data}
                  </pre>
                )}
              </div>
            ))}
            <div ref={logsEndRef} />
          </div>
        </div>
      </div>
    </>
  )
}
